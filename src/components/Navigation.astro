---
import ResponsiveToggle from './ResponsiveToggle.astro';
import { DarkMode } from 'accessible-astro-components';
import { Image } from 'astro:assets';
import logo from '../assets/img/logo_sm.png';
---

<div id="main-navigation" class="is-desktop py-8">
  <div class="container">
    <a
      href={`${import.meta.env.BASE_URL}/`}
      class="flex items-center gap-2 !no-underline class="
      NavigationLogo""
    >
      <Image src={logo} alt="Logo" />
    </a>
    <div class="wrapper">
      <nav class="desktop-menu" aria-label="Main navigation desktop">
        <ul class="menu">
          <slot />
        </ul>
      </nav>
      <DarkMode />
      <ResponsiveToggle />
    </div>
    <nav class="mobile-menu" aria-label="Main navigation mobile">
      <ul class="menu">
        <slot />
      </ul>
    </nav>
  </div>
</div>

<script>
  document.addEventListener('astro:page-load', () => {
    // variables
    const mainNav = document.querySelector('#main-navigation');
    const mainMenu = mainNav.querySelector('ul');
    const dropdownMenus = [
      ...document.querySelectorAll('.has-dropdown button'),
    ];

    // functions
    const setActiveMenuItem = () => {
      const mobileDesktopMenus = mainNav.querySelectorAll('nav > ul');
      const currenPathname = window.location.pathname;

      mobileDesktopMenus.forEach((menu) => {
        const menuItems = [
          ...menu.querySelectorAll('a:not([rel*="external"])'),
        ] as HTMLAnchorElement[];

        menuItems.forEach((menuItem) => {
          if (
            currenPathname.includes(menuItem.pathname.replaceAll('/', '')) &&
            menuItem.textContent !== 'Home'
          ) {
            menuItem.classList.add('is-active');
            menuItem.setAttribute('aria-current', 'page');
          } else if (
            menuItem.textContent === 'Home' &&
            currenPathname === '/'
          ) {
            menuItem.classList.add('is-active');
            menuItem.setAttribute('aria-current', 'page');
          }
        });
      });
    };

    const checkMenuSize = () => {
      const mainNavWidth = mainNav.getBoundingClientRect().width;
      const desktopMenuWidth = document
        .querySelector('.desktop-menu')
        .getBoundingClientRect().width;
      const logoWidthBuffer = 300;
      const totalMenuWidth = Math.round(desktopMenuWidth) + logoWidthBuffer;

      if (totalMenuWidth >= mainNavWidth) {
        mainNav.classList.remove('is-desktop');
        mainNav.classList.add('is-mobile');
      } else if (totalMenuWidth <= mainNavWidth) {
        mainNav.classList.add('is-desktop');
        mainNav.classList.remove('is-mobile');
      }
    };

    const isOutOfViewport = (element) => {
      const elementBounds = element.getBoundingClientRect();
      return (
        elementBounds.right >
        (window.innerWidth || document.documentElement.clientWidth)
      );
    };

    const openDropdownMenu = (dropdownMenu) => {
      const dropdownList = dropdownMenu.parentNode.querySelector('ul');

      dropdownMenu.classList.add('show');
      dropdownMenu.setAttribute('aria-expanded', 'true');

      if (isOutOfViewport(dropdownList)) {
        dropdownList.style.left = 'auto';
      }
    };

    const closeDropdownMenu = (dropdownMenu) => {
      dropdownMenu.classList.remove('show');
      dropdownMenu.setAttribute('aria-expanded', 'false');
    };

    const closeAllDropdownMenus = () => {
      for (let i = 0; i < dropdownMenus.length; i++) {
        closeDropdownMenu(dropdownMenus[i]);
      }
    };

    const toggleDropdownMenu = (event) => {
      if (event.target.getAttribute('aria-expanded') === 'false') {
        closeAllDropdownMenus();
        openDropdownMenu(event.target);
      } else {
        closeDropdownMenu(event.target);
      }
    };

    // execution
    mainMenu &&
      mainMenu.addEventListener('keydown', (event) => {
        const element = event.target as Element;
        const currentMenuItem = element.closest('li');
        const menuItems = [...mainMenu.querySelectorAll('.menu-item')];
        const currentDropdownMenu = element.closest('.has-dropdown button');
        const currentDropdownMenuItem = element.closest('.has-dropdown li');
        const currentIndex = menuItems.findIndex(
          (item) => item === currentMenuItem
        );

        const key = event.key;
        let targetItem;

        if (key === 'ArrowRight') {
          if (menuItems.indexOf(currentMenuItem) === menuItems.length - 1) {
            targetItem = menuItems[0];
          } else {
            targetItem = menuItems[currentIndex + 1];
          }
        }

        if (key === 'ArrowLeft') {
          if (menuItems.indexOf(currentMenuItem) === 0) {
            targetItem = menuItems[menuItems.length - 1];
          } else {
            targetItem = menuItems[currentIndex - 1];
          }
        }

        if (key === 'Escape') {
          targetItem = menuItems[0];
        }

        if (currentDropdownMenu) {
          const firstDropdownItem =
            currentDropdownMenu.nextElementSibling.querySelector('li');

          if (key === 'ArrowDown') {
            event.preventDefault();
            openDropdownMenu(currentDropdownMenu);
            targetItem = firstDropdownItem;
          }

          if (key === 'Escape') {
            closeDropdownMenu(currentDropdownMenu);
          }
        }

        if (currentDropdownMenuItem) {
          const currentDropdownList = currentDropdownMenuItem.parentNode;
          const dropdownMenuItems = [
            ...currentDropdownList.querySelectorAll('li'),
          ];
          const currentIndex = dropdownMenuItems.findIndex(
            (item) => item === currentDropdownMenuItem
          );

          if (key === 'ArrowDown') {
            event.preventDefault();

            if (
              dropdownMenuItems.indexOf(
                currentDropdownMenuItem as HTMLLIElement
              ) ===
              dropdownMenuItems.length - 1
            ) {
              targetItem = dropdownMenuItems[0];
            } else {
              targetItem = dropdownMenuItems[currentIndex + 1];
            }
          }

          if (key === 'ArrowUp') {
            event.preventDefault();

            if (
              dropdownMenuItems.indexOf(
                currentDropdownMenuItem as HTMLLIElement
              ) === 0
            ) {
              targetItem = dropdownMenuItems[dropdownMenuItems.length - 1];
            } else {
              targetItem = dropdownMenuItems[currentIndex - 1];
            }
          }

          if (key === 'Escape') {
            const currentDropdownMenu = (currentDropdownList as Element)
              .previousElementSibling;
            targetItem = currentDropdownMenu.parentNode;
            closeAllDropdownMenus();
          }

          if (key === 'Tab') {
            const currentDropdownMenu = (currentDropdownList as Element)
              .previousElementSibling;

            if (
              dropdownMenuItems.indexOf(
                currentDropdownMenuItem as HTMLLIElement
              ) ===
              dropdownMenuItems.length - 1
            ) {
              closeDropdownMenu(currentDropdownMenu);
            }
          }
        }

        if (targetItem) {
          targetItem.querySelector('a, button, input').focus();
        }
      });

    dropdownMenus &&
      dropdownMenus.forEach((dropdownMenu) => {
        dropdownMenu.addEventListener('click', toggleDropdownMenu);
      });

    setActiveMenuItem();
    checkMenuSize();

    window.addEventListener('resize', checkMenuSize);
    window.addEventListener('click', (event) => {
      const element = event.target as Element;
      if (
        !element.hasAttribute('aria-haspopup') &&
        !element.classList.contains('submenu-item')
      ) {
        closeAllDropdownMenus();
      }
    });

    const menuItems = document.querySelectorAll(
      '#main-navigation nav > ul > li'
    );
    menuItems.forEach((li) => {
      li.addEventListener('mouseenter', () => {
        const rect = li.getBoundingClientRect();
        li.style.setProperty('--menu-item-width', `${rect.width}px`);
        li.style.setProperty('--menu-item-left', `${rect.left}px`);
        li.style.setProperty('--menu-item-height', `${rect.height}px`);
        li.style.setProperty('--menu-item-top', `${rect.top}px`);
      });
      li.addEventListener('focusin', () => {
        const rect = li.getBoundingClientRect();
        li.style.setProperty('--menu-item-width', `${rect.width}px`);
        li.style.setProperty('--menu-item-left', `${rect.left}px`);
        li.style.setProperty('--menu-item-height', `${rect.height}px`);
        li.style.setProperty('--menu-item-top', `${rect.top}px`);
      });
    });
  });
</script>

<style lang="scss" is:global>
  @use '../assets/scss/base/breakpoint' as *;
  @use '../assets/scss/base/outline' as *;

  #main-navigation {
    > .container {
      display: flex;
      flex-wrap: wrap;
      justify-content: space-between;
    }

    &.is-desktop {
      .desktop-menu {
        position: static;
        visibility: visible;
      }

      .mobile-menu {
        display: none;
      }

      .darkmode-toggle {
        margin-top: -6px;
      }
    }

    &.is-mobile {
      flex-direction: column;

      .mobile-menu {
        display: none;

        &.show {
          display: block;
        }
      }

      .desktop-menu {
        position: absolute;
        left: 0;
        visibility: hidden;
        z-index: -99;
      }

      .responsive-toggle {
        display: block;
      }

      nav > ul > li::before {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background:
          url('/assets/img/menu.png') center top/cover no-repeat,
          rgb(206, 48, 48);
        border-radius: 0.375rem 0.375rem 0 0;
        z-index: 10;
        opacity: 0;
        transition: opacity 0.2s;
        pointer-events: none;
      }
    }

    .wrapper {
      display: flex;
      align-items: center;
      gap: 1rem;
    }

    nav {
      > ul {
        display: flex;
        gap: 1.5rem;
        list-style-type: none;

        li {
          position: relative;
          flex: 1 1 0;
          align-items: stretch;
          justify-content: center;
          border-radius: 0.375rem 0.375rem 0 0;
          transition: background 0.2s;
          min-width: 90px;

          // Highlight column on hover, focus, or active
          &:hover::before,
          &.is-active::before,
          &:focus-within::before {
            opacity: 1;
            pointer-events: none;
          }

          &::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            // Calculate the left offset of the li
            // We'll use JS to set a CSS variable for this
            width: var(--menu-item-width, 100px);
            left: var(--menu-item-left, 0px);
            height: calc(
              var(--menu-item-height, 60px) + var(--menu-item-top, 0px)
            );
            background:
              url('/assets/img/menu.png') center top/cover no-repeat,
              rgb(206, 48, 48);
            border-radius: 0.375rem 0.375rem 0 0;
            z-index: 10;
            opacity: 0;
            transition: opacity 0.2s;
            pointer-events: none;
          }

          > a,
          > button {
            width: 100%;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: inherit;
            position: relative;
            z-index: 11;
            text-align: center;
            padding: 0.75rem 1rem;
          }
        }
      }
    }

    .mobile-menu {
      flex-basis: 100%;
      padding: 2rem 0;

      > ul {
        flex-direction: column;

        ul {
          position: relative;
          margin-top: 1rem;
        }
      }

      a,
      button {
        display: block;
        padding: 0.5rem 0;
        width: 100%;
      }
    }

    .has-dropdown {
      position: relative;

      > button {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        margin-top: -1px;
        border: none;
        padding: 0;
        color: var(--action-color);

        &:hover {
          color: var(--action-color-state);

          &::after {
            border-color: var(--action-color-state);
          }
        }

        &::after {
          transform: rotate(135deg);
          margin-top: -0.25rem;
          border-width: 0.2em 0.2em 0 0;
          border-style: solid;
          border-color: var(--action-color);
          width: 0.85rem;
          height: 0.75em;
          content: '';
        }

        &.show {
          &::after {
            transform: rotate(-45deg);
            margin-top: 0.25rem;
          }

          ~ ul {
            display: flex;
            flex-direction: column;
            gap: 1rem;
          }
        }
      }

      ul {
        display: none;
        position: absolute;
        top: 125%;
        right: 0;
        bottom: auto;
        left: 0;
        z-index: 100;
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.15);
        border: 2px solid black;
        background-color: var(--neutral-background);
        padding: 1rem;
        min-width: 260px;
      }
      .dropdown-menu {
        filter: drop-shadow(3px 3px 3px #9ea6a9);
        border: 0.5px solid var(--neutral-900);
        border-radius: 15px;
      }
    }

    .darkmode-toggle {
      border: none;
      padding: 0;

      .icon {
        margin-top: 4px;
        inline-size: 30px;
        block-size: 30px;
      }

      svg path {
        fill: var(--action-color);
      }

      &:hover {
        box-shadow: none;

        svg path {
          fill: var(--action-color-state);
        }
      }

      &:focus {
        @include outline;

        &:not(:focus-visible) {
          outline: none;
          box-shadow: none;
        }
      }
    }

    nav a,
    nav button {
      text-decoration: none !important;
    }

    nav > ul > li > a,
    nav > ul > li > button {
      white-space: nowrap;
    }

    // Light mode: make menu text white on hover or is-active
    &:not(.dark) nav > ul > li {
      // When hovered, focused, or active, set text to white
      &:hover > a,
      &:hover > button,
      &.is-active > a,
      &.is-active > button,
      &:focus-within > a,
      &:focus-within > button {
        color: #fff !important;
      }
    }
  }
</style>
